for(i in seq(11, ncol(linha), 2)){
valorIndicador = linha[,i]
valorDesvio = linha[,i+1]
valor = c()
micro = regioes[regioes$REGIAO==linha[,9] & regioes$ANO==ano,colnames(desvios)[i]]
meso = regioes[regioes$REGIAO==linha[,7] & regioes$ANO==ano,colnames(desvios)[i]]
estado = regioes[regioes$REGIAO==linha[,3] & regioes$ANO==ano,colnames(desvios)[i]]
valor = c(valorIndicador,micro,meso,estado)
if(!is.na(valorIndicador)){
print(valorDesvio)
criaImagem(valor,colnames(desvios)[i],codigo,valorDesvio)
}
criaImagemSerieTemporal(codigo, seriesContador)
seriesContador = seriesCOntador + 1
}
args = commandArgs(trailingOnly = TRUE)
print(args)
require("ggplot2")
options(stringsAsFactors = FALSE)
#TODO: captura o diretorio corrente e inclui no nome do arquivo
#Leitura de arquivos
desvios = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/tabela_com_todos_os_indicadores_selecionados_e_desvios.csv",fileEncoding="latin1")
regioes = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",fileEncoding="latin1")
codigo = "Cabedelo"
#codigo = paste(args,collapse=" ")
ano = 2011
linha = desvios[desvios$NOME_MUNICIPIO==codigo & desvios$ANO==ano,]
criaImagem = function(valor,indicador,codigo,dp){
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/"
desv = dp
if(dp < 0){
dp = dp*(-1)
}
png(paste(path ,codigo,"_",indicador,"_",desv,".png", sep=""),width = 382, height = 291)
barplot(valor[1], xlim=c(-0.5,2), ylim=c(0,max(valor)+dp), axes=T)
abline(valor[2],0,col="green",lty=2) # MICRO
abline(valor[3],0,col="red",lty=4) # MESO
abline(valor[4],0,col="blue",lty=5) # ESTADO
#legend("bottomright", inset=.05, c("Micro","Meso","Estado"), col = c("green","red","blue"),lty = c(2,4,5), horiz=F)
dev.off()
}
#retorna o maior desvio(absoluto) de um indicador(apenas indices impares)
retornaMaiorDesvioIndicar = function(tabela.cidade, numero.indicador) {
cidade = tabela.cidade
tabela = cidade[,c(5, numero.indicador, numero.indicador+1)]
tabela = na.omit(tabela)
maior = 0
for (indice in tabela[,3]) {
if (maior < abs(indice)) {
maior = indice
}
}
return(maior)
}
#Cria uma imagem de uma serie temporal, recebendo uma cidade e um indicador como parametros
criaImagemSerieTemporal = function(nome.cidade, numero.indicador){
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/graphs/"
paraiba = regioes[regioes$REGIAO=="Paraíba",]
cidade = desvios[desvios$NOME_MUNICIPIO==nome.cidade,]
indicador.desvio = 10 + (2*numero.indicador - 1)
indicador.regiao = 3 + numero.indicador
desvio = retornaMaiorDesvioIndicar(cidade, indicador.desvio)
indicador = colnames(cidade)[indicador.desvio]
tabela = cidade[,c(5,10,indicador.desvio)]
colnames(tabela)[2] = "REGIAO"
tabela = rbind(tabela, paraiba[,c(3,2,indicador.regiao)])
colnames(tabela)[3] = "VALOR"
tabela = na.omit(tabela)
p = ggplot(tabela, aes(x=ANO, y=VALOR, colour=REGIAO)) +
geom_line(aes(group=REGIAO)) +
geom_point(size=3) +
theme_bw() +
theme(legend.position="none")
png(paste(path,nome.cidade,"_SERIE","_",indicador,"_",desvio,".png", sep=""),width = 382, height = 291)
print(p)
dev.off()
}
seriesContador = 1
for(i in seq(11, ncol(linha), 2)){
valorIndicador = linha[,i]
valorDesvio = linha[,i+1]
valor = c()
micro = regioes[regioes$REGIAO==linha[,9] & regioes$ANO==ano,colnames(desvios)[i]]
meso = regioes[regioes$REGIAO==linha[,7] & regioes$ANO==ano,colnames(desvios)[i]]
estado = regioes[regioes$REGIAO==linha[,3] & regioes$ANO==ano,colnames(desvios)[i]]
valor = c(valorIndicador,micro,meso,estado)
if(!is.na(valorIndicador)){
print(valorDesvio)
criaImagem(valor,colnames(desvios)[i],codigo,valorDesvio)
}
criaImagemSerieTemporal(codigo, seriesContador)
seriesContador = seriesCOntador + 1
}
args = commandArgs(trailingOnly = TRUE)
print(args)
require("ggplot2")
options(stringsAsFactors = FALSE)
#TODO: captura o diretorio corrente e inclui no nome do arquivo
#Leitura de arquivos
desvios = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/tabela_com_todos_os_indicadores_selecionados_e_desvios.csv",fileEncoding="latin1")
regioes = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",fileEncoding="latin1")
codigo = "Cabedelo"
#codigo = paste(args,collapse=" ")
ano = 2011
linha = desvios[desvios$NOME_MUNICIPIO==codigo & desvios$ANO==ano,]
criaImagem = function(valor,indicador,codigo,dp){
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/"
desv = dp
if(dp < 0){
dp = dp*(-1)
}
png(paste(path ,codigo,"_",indicador,"_",desv,".png", sep=""),width = 382, height = 291)
barplot(valor[1], xlim=c(-0.5,2), ylim=c(0,max(valor)+dp), axes=T)
abline(valor[2],0,col="green",lty=2) # MICRO
abline(valor[3],0,col="red",lty=4) # MESO
abline(valor[4],0,col="blue",lty=5) # ESTADO
#legend("bottomright", inset=.05, c("Micro","Meso","Estado"), col = c("green","red","blue"),lty = c(2,4,5), horiz=F)
dev.off()
}
#retorna o maior desvio(absoluto) de um indicador(apenas indices impares)
retornaMaiorDesvioIndicar = function(tabela.cidade, numero.indicador) {
cidade = tabela.cidade
tabela = cidade[,c(5, numero.indicador, numero.indicador+1)]
tabela = na.omit(tabela)
maior = 0
for (indice in tabela[,3]) {
if (maior < abs(indice)) {
maior = indice
}
}
return(maior)
}
#Cria uma imagem de uma serie temporal, recebendo uma cidade e um indicador como parametros
criaImagemSerieTemporal = function(nome.cidade, numero.indicador){
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/graphs/"
paraiba = regioes[regioes$REGIAO=="Paraíba",]
cidade = desvios[desvios$NOME_MUNICIPIO==nome.cidade,]
indicador.desvio = 10 + (2*numero.indicador - 1)
indicador.regiao = 3 + numero.indicador
desvio = retornaMaiorDesvioIndicar(cidade, indicador.desvio)
indicador = colnames(cidade)[indicador.desvio]
tabela = cidade[,c(5,10,indicador.desvio)]
colnames(tabela)[2] = "REGIAO"
tabela = rbind(tabela, paraiba[,c(3,2,indicador.regiao)])
colnames(tabela)[3] = "VALOR"
tabela = na.omit(tabela)
p = ggplot(tabela, aes(x=ANO, y=VALOR, colour=REGIAO)) +
geom_line(aes(group=REGIAO)) +
geom_point(size=3) +
theme_bw() +
theme(legend.position="none")
png(paste(path,nome.cidade,"_SERIE","_",indicador,"_",desvio,".png", sep=""),width = 382, height = 291)
print(p)
dev.off()
}
seriesContador = 1
for(i in seq(11, ncol(linha), 2)){
valorIndicador = linha[,i]
valorDesvio = linha[,i+1]
valor = c()
micro = regioes[regioes$REGIAO==linha[,9] & regioes$ANO==ano,colnames(desvios)[i]]
meso = regioes[regioes$REGIAO==linha[,7] & regioes$ANO==ano,colnames(desvios)[i]]
estado = regioes[regioes$REGIAO==linha[,3] & regioes$ANO==ano,colnames(desvios)[i]]
valor = c(valorIndicador,micro,meso,estado)
if(!is.na(valorIndicador)){
print(valorDesvio)
criaImagem(valor,colnames(desvios)[i],codigo,valorDesvio)
}
criaImagemSerieTemporal(codigo, seriesContador)
seriesContador = seriesContador + 1
}
args = commandArgs(trailingOnly = TRUE)
print(args)
require("ggplot2")
options(stringsAsFactors = FALSE)
#TODO: captura o diretorio corrente e inclui no nome do arquivo
#Leitura de arquivos
desvios = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/tabela_com_todos_os_indicadores_selecionados_e_desvios.csv",fileEncoding="latin1")
regioes = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",fileEncoding="latin1")
codigo = "Cabedelo"
#codigo = paste(args,collapse=" ")
ano = 2011
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/graphs/"
linha = desvios[desvios$NOME_MUNICIPIO==codigo & desvios$ANO==ano,]
criaImagem = function(valor,indicador,codigo,dp){
desv = dp
if(dp < 0){
dp = dp*(-1)
}
png(paste(path ,codigo,"_",indicador,"_",desv,".png", sep=""),width = 382, height = 291)
barplot(valor[1], xlim=c(-0.5,2), ylim=c(0,max(valor)+dp), axes=T)
abline(valor[2],0,col="green",lty=2) # MICRO
abline(valor[3],0,col="red",lty=4) # MESO
abline(valor[4],0,col="blue",lty=5) # ESTADO
#legend("bottomright", inset=.05, c("Micro","Meso","Estado"), col = c("green","red","blue"),lty = c(2,4,5), horiz=F)
dev.off()
}
#retorna o maior desvio(absoluto) de um indicador(apenas indices impares)
retornaMaiorDesvioIndicar = function(tabela.cidade, numero.indicador) {
cidade = tabela.cidade
tabela = cidade[,c(5, numero.indicador, numero.indicador+1)]
tabela = na.omit(tabela)
maior = 0
for (indice in tabela[,3]) {
if (maior < abs(indice)) {
maior = indice
}
}
return(maior)
}
#Cria uma imagem de uma serie temporal, recebendo uma cidade e um indicador como parametros
criaImagemSerieTemporal = function(nome.cidade, numero.indicador){
paraiba = regioes[regioes$REGIAO=="Paraíba",]
cidade = desvios[desvios$NOME_MUNICIPIO==nome.cidade,]
indicador.desvio = 10 + (2*numero.indicador - 1)
indicador.regiao = 3 + numero.indicador
desvio = retornaMaiorDesvioIndicar(cidade, indicador.desvio)
indicador = colnames(cidade)[indicador.desvio]
tabela = cidade[,c(5,10,indicador.desvio)]
colnames(tabela)[2] = "REGIAO"
tabela = rbind(tabela, paraiba[,c(3,2,indicador.regiao)])
colnames(tabela)[3] = "VALOR"
tabela = na.omit(tabela)
p = ggplot(tabela, aes(x=ANO, y=VALOR, colour=REGIAO)) +
geom_line(aes(group=REGIAO)) +
geom_point(size=3) +
theme_bw() +
theme(legend.position="none")
png(paste(path,nome.cidade,"_SERIE","_",indicador,"_",desvio,".png", sep=""),width = 382, height = 291)
print(p)
dev.off()
}
seriesContador = 1
for(i in seq(11, ncol(linha), 2)){
valorIndicador = linha[,i]
valorDesvio = linha[,i+1]
valor = c()
micro = regioes[regioes$REGIAO==linha[,9] & regioes$ANO==ano,colnames(desvios)[i]]
meso = regioes[regioes$REGIAO==linha[,7] & regioes$ANO==ano,colnames(desvios)[i]]
estado = regioes[regioes$REGIAO==linha[,3] & regioes$ANO==ano,colnames(desvios)[i]]
valor = c(valorIndicador,micro,meso,estado)
if(!is.na(valorIndicador)){
print(valorDesvio)
criaImagem(valor,colnames(desvios)[i],codigo,valorDesvio)
}
criaImagemSerieTemporal(codigo, seriesContador)
seriesContador = seriesContador + 1
}
dicionario = data.frame(key = c("INDICADOR_62", "INDICADOR_89", "INDICADOR_90", "INDICADOR_329", "INDICADOR_333", "INDICADOR_73", "INDICADOR_74", "INDICADOR_80", "INDICADOR_81",
"INDICADOR_176", "INDICADOR_177", "INDICADOR_202", "INDICADOR_184", "INDICADOR_7", "INDICADOR_201"),
indicador = c("Part. despesa e encargos educação(%)", "IDEB - 5º ano do ensino fundamental", "IDEB - 9º ano do ensino fundamental", "Taxa de analfabetismo",
"Taxa de atendimento escolar", "Taxa abandono total - fundamental(%)", "Taxa de abandono - ensino médio(%)", "Taxa aprovação total - fundamental(%)",
"Taxa de aprovação - ensino médio (%)", "Percentual docentes formação superior(%)", "Percentual de docentes temporários", "Índice precariedade infraestrutura",
"Despesa educação aluno", "Índice eficiência educação básica"))
indicador = c("Part. despesa e encargos educação(%)", "IDEB - 5º ano do ensino fundamental", "IDEB - 9º ano do ensino fundamental", "Taxa de analfabetismo",
"Taxa de atendimento escolar", "Taxa abandono total - fundamental(%)", "Taxa de abandono - ensino médio(%)", "Taxa aprovação total - fundamental(%)",
"Taxa de aprovação - ensino médio (%)", "Percentual docentes formação superior(%)", "Percentual de docentes temporários", "Índice precariedade infraestrutura",
"Despesa educação aluno", "Índice eficiência educação básica")
fix(indicador)
dicionario = data.frame(key = c("INDICADOR_62", "INDICADOR_89", "INDICADOR_90", "INDICADOR_329", "INDICADOR_333", "INDICADOR_73", "INDICADOR_74", "INDICADOR_80", "INDICADOR_81",
"INDICADOR_176", "INDICADOR_177", "INDICADOR_202", "INDICADOR_184", "INDICADOR_7", "INDICADOR_201"),
indicador = c("Part. despesa e encargos educação(%)", "IDEB - 5º ano do ensino fundamental", "IDEB - 9º ano do ensino fundamental", "Taxa de analfabetismo",
"Taxa de atendimento escolar", "Taxa abandono total - fundamental(%)", "Taxa de abandono - ensino médio(%)", "Taxa aprovação total - fundamental(%)",
"Taxa de aprovação - ensino médio (%)", "Percentual docentes formação superior(%)", "Percentual de docentes temporários", "Índice precariedade infraestrutura",
"Razão aluno por docente", "Despesa educação aluno", "Índice eficiência educação básica"))
View(dicionario)
nome.cidade = "Campina Grande"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i)
}
args = commandArgs(trailingOnly = TRUE)
print(args)
require("ggplot2")
options(stringsAsFactors = FALSE)
#TODO: captura o diretorio corrente e inclui no nome do arquivo
#Leitura de arquivos
desvios = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/tabela_com_todos_os_indicadores_selecionados_e_desvios.csv",fileEncoding="latin1")
regioes = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",fileEncoding="latin1")
#codigo = "Cabedelo"
codigo = paste(args,collapse=" ")
ano = 2011
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/graphs/"
linha = desvios[desvios$NOME_MUNICIPIO==codigo & desvios$ANO==ano,]
criaImagem = function(valor,indicador,codigo,dp){
desv = dp
if(dp < 0){
dp = dp*(-1)
}
png(paste(path ,codigo,"_",indicador,"_",desv,".png", sep=""),width = 382, height = 291)
barplot(valor[1], xlim=c(-0.5,2), ylim=c(0,max(valor)+dp), axes=T)
abline(valor[2],0,col="green",lty=2) # MICRO
abline(valor[3],0,col="red",lty=4) # MESO
abline(valor[4],0,col="blue",lty=5) # ESTADO
#legend("bottomright", inset=.05, c("Micro","Meso","Estado"), col = c("green","red","blue"),lty = c(2,4,5), horiz=F)
dev.off()
}
#retorna o maior desvio(absoluto) de um indicador(apenas indices impares)
retornaMaiorDesvioIndicar = function(tabela.cidade, numero.indicador) {
cidade = tabela.cidade
tabela = cidade[,c(5, numero.indicador, numero.indicador+1)]
tabela = na.omit(tabela)
maior = 0
for (indice in tabela[,3]) {
if (maior < abs(indice)) {
maior = indice
}
}
return(maior)
}
#Cria uma imagem de uma serie temporal, recebendo uma cidade e um indicador como parametros
criaImagemSerieTemporal = function(nome.cidade, numero.indicador, dicionario){
paraiba = regioes[regioes$REGIAO=="Paraíba",]
cidade = desvios[desvios$NOME_MUNICIPIO==nome.cidade,]
indicador.desvio = 10 + (2*numero.indicador - 1)
indicador.regiao = 3 + numero.indicador
nome.indicador = dicionario$indicador[numero,indicador]
desvio = retornaMaiorDesvioIndicar(cidade, indicador.desvio)
indicador = colnames(cidade)[indicador.desvio]
tabela = cidade[,c(5,10,indicador.desvio)]
colnames(tabela)[2] = "REGIAO"
tabela = rbind(tabela, paraiba[,c(3,2,indicador.regiao)])
colnames(tabela)[3] = "VALOR"
tabela = na.omit(tabela)
p = ggplot(tabela, aes(x=ANO, y=VALOR, colour=REGIAO)) +
geom_line(aes(group=REGIAO)) +
geom_point(size=3) +
theme_bw() +
theme(legend.position="none")  +
labs(title = nome.indicador)
png(paste(path,nome.cidade,"_SERIE","_",indicador,"_",desvio,".png", sep=""),width = 382, height = 291)
print(p)
dev.off()
}
dicionario = data.frame(key = c("INDICADOR_62", "INDICADOR_89", "INDICADOR_90", "INDICADOR_329", "INDICADOR_333", "INDICADOR_73", "INDICADOR_74", "INDICADOR_80", "INDICADOR_81",
"INDICADOR_176", "INDICADOR_177", "INDICADOR_202", "INDICADOR_184", "INDICADOR_7", "INDICADOR_201"),
indicador = c("Part. despesa e encargos educação(%)", "IDEB - 5º ano do ensino fundamental", "IDEB - 9º ano do ensino fundamental", "Taxa de analfabetismo",
"Taxa de atendimento escolar", "Taxa abandono total - fundamental(%)", "Taxa de abandono - ensino médio(%)", "Taxa aprovação total - fundamental(%)",
"Taxa de aprovação - ensino médio (%)", "Percentual docentes formação superior(%)", "Percentual de docentes temporários", "Índice precariedade infraestrutura",
"Razão aluno por docente", "Despesa educação aluno", "Índice eficiência educação básica"))
## Itera nos dados relacionados a cidade relacionada e gera graficos de barra e temporais
seriesContador = 1
for(i in seq(11, ncol(linha), 2)){
valorIndicador = linha[,i]
valorDesvio = linha[,i+1]
valor = c()
micro = regioes[regioes$REGIAO==linha[,9] & regioes$ANO==ano,colnames(desvios)[i]]
meso = regioes[regioes$REGIAO==linha[,7] & regioes$ANO==ano,colnames(desvios)[i]]
estado = regioes[regioes$REGIAO==linha[,3] & regioes$ANO==ano,colnames(desvios)[i]]
valor = c(valorIndicador,micro,meso,estado)
if(!is.na(valorIndicador)) {
print(valorDesvio)
criaImagem(valor,colnames(desvios)[i],codigo,valorDesvio)
}
# Cria as imagens de series temporais para a cidade
criaImagemSerieTemporal(codigo, seriesContador)
seriesContador = seriesContador + 1
}
nome.cidade = "Campina Grande"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i)
}
nome.cidade = "Campina Grande"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i)
}
dicionario = data.frame(key = c("INDICADOR_62", "INDICADOR_89", "INDICADOR_90", "INDICADOR_329", "INDICADOR_333", "INDICADOR_73", "INDICADOR_74", "INDICADOR_80", "INDICADOR_81",
"INDICADOR_176", "INDICADOR_177", "INDICADOR_202", "INDICADOR_184", "INDICADOR_7", "INDICADOR_201"),
indicador = c("Part. despesa e encargos educação(%)", "IDEB - 5º ano do ensino fundamental", "IDEB - 9º ano do ensino fundamental", "Taxa de analfabetismo",
"Taxa de atendimento escolar", "Taxa abandono total - fundamental(%)", "Taxa de abandono - ensino médio(%)", "Taxa aprovação total - fundamental(%)",
"Taxa de aprovação - ensino médio (%)", "Percentual docentes formação superior(%)", "Percentual de docentes temporários", "Índice precariedade infraestrutura",
"Razão aluno por docente", "Despesa educação aluno", "Índice eficiência educação básica"))
nome.cidade = "Campina Grande"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i)
}
nome.cidade = "Campina Grande"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i,dicionario)
}
args = commandArgs(trailingOnly = TRUE)
print(args)
require("ggplot2")
options(stringsAsFactors = FALSE)
#TODO: captura o diretorio corrente e inclui no nome do arquivo
#Leitura de arquivos
desvios = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/tabela_com_todos_os_indicadores_selecionados_e_desvios.csv",fileEncoding="latin1")
regioes = read.csv("C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",fileEncoding="latin1")
#codigo = "Cabedelo"
codigo = paste(args,collapse=" ")
ano = 2011
path = "C:/Users/Henrique/Desktop/eduBrasil/scripts/processing/SPRINT2/graphs/"
linha = desvios[desvios$NOME_MUNICIPIO==codigo & desvios$ANO==ano,]
criaImagem = function(valor,indicador,codigo,dp){
desv = dp
if(dp < 0){
dp = dp*(-1)
}
png(paste(path ,codigo,"_",indicador,"_",desv,".png", sep=""),width = 382, height = 291)
barplot(valor[1], xlim=c(-0.5,2), ylim=c(0,max(valor)+dp), axes=T)
abline(valor[2],0,col="green",lty=2) # MICRO
abline(valor[3],0,col="red",lty=4) # MESO
abline(valor[4],0,col="blue",lty=5) # ESTADO
#legend("bottomright", inset=.05, c("Micro","Meso","Estado"), col = c("green","red","blue"),lty = c(2,4,5), horiz=F)
dev.off()
}
#retorna o maior desvio(absoluto) de um indicador(apenas indices impares)
retornaMaiorDesvioIndicar = function(tabela.cidade, numero.indicador) {
cidade = tabela.cidade
tabela = cidade[,c(5, numero.indicador, numero.indicador+1)]
tabela = na.omit(tabela)
maior = 0
for (indice in tabela[,3]) {
if (maior < abs(indice)) {
maior = indice
}
}
return(maior)
}
#Cria uma imagem de uma serie temporal, recebendo uma cidade e um indicador como parametros
criaImagemSerieTemporal = function(nome.cidade, numero.indicador, dicionario){
paraiba = regioes[regioes$REGIAO=="Paraíba",]
cidade = desvios[desvios$NOME_MUNICIPIO==nome.cidade,]
indicador.desvio = 10 + (2*numero.indicador - 1)
indicador.regiao = 3 + numero.indicador
nome.indicador = dicionario$indicador[numero.indicador]
desvio = retornaMaiorDesvioIndicar(cidade, indicador.desvio)
indicador = colnames(cidade)[indicador.desvio]
tabela = cidade[,c(5,10,indicador.desvio)]
colnames(tabela)[2] = "REGIAO"
tabela = rbind(tabela, paraiba[,c(3,2,indicador.regiao)])
colnames(tabela)[3] = "VALOR"
tabela = na.omit(tabela)
p = ggplot(tabela, aes(x=ANO, y=VALOR, colour=REGIAO)) +
geom_line(aes(group=REGIAO)) +
geom_point(size=3) +
theme_bw() +
theme(legend.position="none")  +
labs(title = nome.indicador)
png(paste(path,nome.cidade,"_SERIE","_",indicador,"_",desvio,".png", sep=""),width = 382, height = 291)
print(p)
dev.off()
}
dicionario = data.frame(key = c("INDICADOR_62", "INDICADOR_89", "INDICADOR_90", "INDICADOR_329", "INDICADOR_333", "INDICADOR_73", "INDICADOR_74", "INDICADOR_80", "INDICADOR_81",
"INDICADOR_176", "INDICADOR_177", "INDICADOR_202", "INDICADOR_184", "INDICADOR_7", "INDICADOR_201"),
indicador = c("Part. despesa e encargos educação(%)", "IDEB - 5º ano do ensino fundamental", "IDEB - 9º ano do ensino fundamental", "Taxa de analfabetismo",
"Taxa de atendimento escolar", "Taxa abandono total - fundamental(%)", "Taxa de abandono - ensino médio(%)", "Taxa aprovação total - fundamental(%)",
"Taxa de aprovação - ensino médio (%)", "Percentual docentes formação superior(%)", "Percentual de docentes temporários", "Índice precariedade infraestrutura",
"Razão aluno por docente", "Despesa educação aluno", "Índice eficiência educação básica"))
## Itera nos dados relacionados a cidade relacionada e gera graficos de barra e temporais
seriesContador = 1
for(i in seq(11, ncol(linha), 2)){
valorIndicador = linha[,i]
valorDesvio = linha[,i+1]
valor = c()
micro = regioes[regioes$REGIAO==linha[,9] & regioes$ANO==ano,colnames(desvios)[i]]
meso = regioes[regioes$REGIAO==linha[,7] & regioes$ANO==ano,colnames(desvios)[i]]
estado = regioes[regioes$REGIAO==linha[,3] & regioes$ANO==ano,colnames(desvios)[i]]
valor = c(valorIndicador,micro,meso,estado)
if(!is.na(valorIndicador)) {
print(valorDesvio)
criaImagem(valor,colnames(desvios)[i],codigo,valorDesvio)
}
# Cria as imagens de series temporais para a cidade
criaImagemSerieTemporal(codigo, seriesContador)
seriesContador = seriesContador + 1
}
nome.cidade = "Campina Grande"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i,dicionario)
}
nome.cidade = "Alagoinha"
for(i in 1:15) {
criaImagemSerieTemporal(nome.cidade,i,dicionario)
}
desvios = read.csv("C:/Users/Henrique/Desktop/eduBrasil/eduBrasil/scripts/processing/SPRINT2/tabela_com_todos_os_indicadores_selecionados_e_desvios.csv",fileEncoding="latin1")
regioes = read.csv("C:/Users/Henrique/Desktop/eduBrasil/eduBrasil/scripts/processing/SPRINT2/medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",fileEncoding="latin1")
View(desvios)
array = [5,10,15,29,30,87,93]
array = [5,10,15,29,30,87,93];
array = [5,10,15,29,30,87,93]
array = [5,10,15,29,30,87,93]
array = {5,10,15,29,30,87,93}
array = {5,10,15,29,30,87,93}
array = [5,10,15,29,30,87,93]
a = [5,10,15,29,30,87,93]
a = c(5,10,15,29,30,87,93)
mean(a)
sd(a)
setwd("C:/Users/Henrique/Desktop/edubrasil/WebContent/data")
data = read.csv("medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv")
data$INDICADOR_201
data.regiao = read.csv("tabela_com_todos_os_indicadores_selecionados_e_desvios.csv")
View(data.regiao)
data.regiao$INDICADOR_201
data$INDICADOR_201
View(data)
data$INDICADOR_201 = 100 * data$INDICADOR_201
data$INDICADOR_201
data.regiao$INDICADOR_201
data.regiao$DESVIOS_MELHOR_INDICADOR_201
data.regiao$INDICADOR_201 = 100 * data.regiao$INDICADOR_201
data.regiao$INDICADOR_201
View(data.regiao)
View(data)
write.csv = (data,"medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv")
write.csv = ("medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv",data)
write.csv(data,"medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv")
write.csv(data.regiao,"tabela_com_todos_os_indicadores_selecionados_e_desvios.csv")
data = read.csv("medianas_para_todos_os_indicadores_agrupados_por_ano_e_regiao.csv")
data.regiao = read.csv("tabela_com_todos_os_indicadores_selecionados_e_desvios.csv")
data$INDICADOR_201
data.regiao$INDICADOR_201
